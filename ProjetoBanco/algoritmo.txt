/*
        DIAGRAMA DA CLASSE:
             ___________________
            |     ContaBanco     |
            |____________________|
            |+ numConta          |
            |# tipo              |
            |- dono              |
            |- saldo             |
            |- status            |
            |____________________|
            |+ abrirConta()      |
            |+ fecharConta()     |
            |+ depositar()       |
            |+ sacar()           |
            |+ pagarMensalidade()|
             ____________________

        ATIVIDADE:
            - Crie uma classe chamada 'ContaBanco' com os atributos:
              'numConta', 'tipo', 'dono', 'saldo' e 'status', os
              GET's e SET's desses atributos e os métodos:
              'abrirConta()', 'fecharConta()', 'depositar()', 'sacar()' e
              'pagarMensalidade()';

            - Para o método construtor, o padrão inicial é 'status' é false e o 'saldo' é 0.00.

            - Quando 'abrirConta()' para o 'tipo' de conta, leve em consideração "CC" (para conta corrente)
              e "CP" (para conta poupança);

            - Quando 'abrirConta()' o 'status' é alterado para true, o 'tipo' recebe
              "CC" ou "CP", caso for "CC" o 'saldo' recebe 50.00, caso for "CP" o saldo
              recebe 150.00;

            - Ao 'fecharConta()' verifique se não há 'saldo', se houver retire da conta e
              o 'status' receberá 'false';

            - Para 'depositar()' o 'status' precisa estar true;

            - Para 'sacar()' o 'status' precisa estar true e é necessário que tenha algum
              'saldo', sendo que não será possível 'sacar()' se não houver 'saldo' suficiente;

            - Quando 'pagarMensalidade()' o clinte com "CC" terá 12.00 descontados do seu 'saldo'
              e o cliente de "CP" terá 20.00 descontados do seu 'saldo';
    */


classe ContaBanco{

	numConta: Inteiro;
	tipo: Caractere;
	dono: Caractere;
	saldo: Real;
	status: Logico;
	
	metodo construtor(){
		setStatus(falso);
		setSaldo(0.00);
	}
	
	metodo getnumConta(){
		retorne numConta;
	}
	
	metodo setnumConta(nc){
		numConta = nc;
	}
	
	metodo getTipo(){
		retorne tipo;
	}
	
	metodo setTipo(tp){
		tipo = tp;
	}
	
	metodo getDono(){
		retorne dono;
	}
	
	metodo setDono(dn){
		dono = dn
	}
	
	metodo getSaldo(){
		retorne saldo;
	}
	
	metodo setSaldo(sl){
		saldo = sl;
	}
	
	metodo getStatus(){
		retorne status;
	}
	
	metodo setStatus(st){
		status = st;
	}
	
	
	
	
	
	metodo abrirConta($tp)
	{
		setStatus(true);
	
		se(tp == "CC"){
			setTipo = tp;
			setSaldo(50.00);
		}
		
		senao se(tp == "CP"){
			setTipo = tp;
			setSaldo(150.00);
		}
	}
	
	
	metodo fecharConta()
	{
		se(getSaldo() > 0){
			escreva "Você não pode fechar um conta que possui saldo";
		}senao se(getSaldo() < 0){
			escreva "Você não pode fechar uma conta em débito";
		}senao{
			setStatus(falso);
		}
	}
	
	
	metodo depositar(vlr)
	{
		se(getStatus() == true){
			setSaldo(getSaldo() + vlr);
		}senao{
			escreva "Você não pode depositar em uma conta fechada";
		}
	}
	
	
	metodo sacar(vlr)
	{
		se(getStatus() == true){
			se(getStatus() >= vlr){
				setSaldo(getSaldo() - vlr);
			}senao{
				escreva "Sua conta não tem saldo suficiente";
			}
		}senao{
			escreva "Não é possível sacar de uma conta fechada";
		}
	}
	
	
	metodo pagarMensalidade()
	{
		mensal: Real;
	
		se(getTipo() == "CC"){
			mensal = 12.00;
		}senao se(getTipo() == "CP"){
			mensal = 20.00;
		}
		
		se(getStatus() == true){
			se(getSaldo() > mensal){
				setSaldo(getSaldo() - mensal);
			}senao{
				escreva "Você não tem saldo suficiente para pagar a mensalidade";
			}
		}senao{
			escreva "Não é possível pagar mensalidade de uma conta fechada";
		}
		
	}

}